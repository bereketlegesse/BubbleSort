# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        def reverseList(head):
            prev = None
            cur = head
            while cur:
                temp = cur.next
                cur.next = prev
                prev = cur
                cur = temp
            return prev
        dummy = ListNode()
        dummy.next = head
        n = 0
        cur = head
        while cur:
            n += 1
            cur = cur.next
        groups = n//k
        tail = dummy
        cur = head
        for i in range(groups):
            end = cur
            for j in range(k-1):
                end = end.next
            remaining = end.next
            end.next = None
            group = reverseList(cur)
            tail.next = group
            tail = cur
            cur = remaining
        tail.next = remaining
        return dummy.next

        
