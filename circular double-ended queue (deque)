class MyCircularDeque(object):

    def __init__(self, k):
        self.size = 0
        self.head = 0
        self.tail = 0
        self.maxsize = k
        self.deque = [None for _ in range(k)]
        

    def insertFront(self, value):
        if self.isFull():return False
        elif self.isEmpty():
            self.deque[self.head] = value
            self.size += 1
            return True
            
        else:
            self.head = (self.head - 1) % self.maxsize
            self.deque[self.head] = value
            self.size += 1
            return True
            
    def insertLast(self, value):
        if self.isFull():return False
        elif self.isEmpty():
            self.deque[self.tail] = value
            self.size += 1
            return True
        else:
            self.tail = (self.tail + 1) % self.maxsize
            self.deque[self.tail] = value
            self.size += 1
            return True
        

    def deleteFront(self):
        if self.isEmpty(): return False
        else:
            self.deque[self.head] = None
            if self.size != 1:
                self.head = (self.head + 1) % self.maxsize
            self.size -= 1
            return True
        

    def deleteLast(self):
        if self.isEmpty():return False
        else:
            self.deque[self.tail] = None
            if self.size != 1:
                self.tail = (self.tail - 1) % self.maxsize
            self.size -= 1
            return True
        

    def getFront(self):
        if self.isEmpty():return -1
        else:
            return self.deque[self.head]
            
        

    def getRear(self):
        if self.isEmpty(): return -1
        else:
            return self.deque[self.tail ]
        

    def isEmpty(self):
        return self.size == 0

    def isFull(self):
        return self.size == self.maxsize
        
