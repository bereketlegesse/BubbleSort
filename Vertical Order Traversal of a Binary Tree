# Definition for a binary tree node.
# class TreeNode:
#     def init(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalTraversal(self, root: Optional[TreeNode] , ) -> List[List[int]]:
        
        store = defaultdict(list)
        def traverse( node,  col , row):
            if not node:
                return 
            store[col].append( [row , node.val ])          
            traverse(node.left , col-1, row+1)
            traverse(node.right , col+1 , row+1)

        traverse(root,0,0)
        minimumKey = min(store.keys())
        maximumKey = max(store.keys())
        vertical_traversal = []
        
        for key in range(minimumKey,maximumKey + 1):
            sameCol = store[key]
            sameCol.sort()
            sameCol = [j[1] for j in sameCol]
            vertical_traversal.append(sameCol)
   
        return vertical_traversal
