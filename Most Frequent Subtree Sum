# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findFrequentTreeSum(self, root: Optional[TreeNode]) -> List[int]:
        frequencySum = defaultdict(int)
        def traverse(node):
            if not node:
                return 0
            subtreeSum = traverse(node.left)+ node.val + traverse(node.right)
            frequencySum[subtreeSum] += 1
            return subtreeSum

        traverse(root)
        maxFrequency = max(frequencySum.values())
        MostFrequentSum = []
        for key in frequencySum.keys():
            if frequencySum[key] == maxFrequency:
                MostFrequentSum.append(key)
                
        return MostFrequentSum
