# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rob(self, root: Optional[TreeNode]) -> int:
        memo = dict()

        def backtrack(node):
            if not node:
                return 0

            if node in memo:
                return memo[node]

            pick = node.val
            if node.left:
                pick += backtrack(node.left.left) + backtrack(node.left.right)

            if node.right:
                pick += backtrack(node.right.left) + backtrack(node.right.right)

            skip = backtrack(node.left) + backtrack(node.right)

            memo[node] = max(skip, pick)
            return max(skip, pick)
        
        return backtrack(root)
